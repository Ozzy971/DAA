import heapq
from collections import Counter

class Node:
    def __init__(self, freq, char=None, left=None, right=None):
        self.freq = freq
        self.char = char
        self.left = left
        self.right = right

    def __lt__(self, other):
        return self.freq < other.freq


def build_huffman_tree(frequency):
    heap = []
    for char, freq in frequency.items():
        heapq.heappush(heap, Node(freq, char))
    while len(heap) > 1:
        left = heapq.heappop(heap)
        right = heapq.heappop(heap)
        merged = Node(left.freq + right.freq, left=left, right=right)
        heapq.heappush(heap, merged)
    return heap[0]


def generate_codes(node, prefix="", code_map={}):
    if node is None:
        return
    if node.char is not None:
        code_map[node.char] = prefix or "0"  # handle single char edge case
        return
    generate_codes(node.left, prefix + "0", code_map)
    generate_codes(node.right, prefix + "1", code_map)
    return code_map


def encode(text, codes):
    return ''.join(codes[char] for char in text)


def decode(encoded_text, root):
    decoded = []
    node = root
    for bit in encoded_text:
        node = node.left if bit == '0' else node.right
        if node.char is not None:
            decoded.append(node.char)
            node = root
    return ''.join(decoded)


if __name__ == "__main__":
    text = "huffmanencodingexample"
    frequency = Counter(text)
    root = build_huffman_tree(frequency)
    codes = generate_codes(root)
    encoded_text = encode(text, codes)
    decoded_text = decode(encoded_text, root)
    print("Character | Frequency | Huffman Code")
    print("------------------------------------")
    for ch in sorted(codes):
        print(f"   {ch}      |     {frequency[ch]}      |    {codes[ch]}")
    print("\nOriginal Text: ", text)
    print("Encoded Text:  ", encoded_text)
    print("Decoded Text:  ", decoded_text)
    print("\nCompression Ratio: {:.2f}%".format((1 - len(encoded_text) / (8 * len(text))) * 100))
